"""
PDF conversion functionality for hotcrp2pdf
"""

import json
import subprocess
import tempfile
import os
from pathlib import Path
from typing import List, Optional
from .models import Talk


def get_cache_dir() -> Path:
    """Get the default cache directory following XDG Base Directory Specification."""
    xdg_cache_home = os.environ.get('XDG_CACHE_HOME')
    if xdg_cache_home:
        cache_dir = Path(xdg_cache_home) / 'hotcrp2pdf'
    else:
        cache_dir = Path.home() / '.cache' / 'hotcrp2pdf'
    
    cache_dir.mkdir(parents=True, exist_ok=True)
    return cache_dir


class HotCRPConverter:
    """Convert HotCRP submissions to PDF."""
    
    def __init__(self, cache_dir: Optional[Path] = None):
        """Initialize the converter.
        
        Args:
            cache_dir: Directory to store intermediate files. If None, uses XDG cache directory.
        """
        self.cache_dir = cache_dir or get_cache_dir()
        self.cache_dir.mkdir(parents=True, exist_ok=True)
    
    def load_submissions(self, json_file: Path) -> List[Talk]:
        """Load talk submissions from JSON file."""
        with open(json_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        talks = []
        for record in data:
            try:
                talk = Talk.from_record(record)
                talks.append(talk)
            except Exception as e:
                print(f"Warning: Failed to parse submission {record.get('pid', 'unknown')}: {e}")
        
        return talks
    
    def generate_markdown(self, talks: List[Talk], include_authors: bool = True, 
                         title: str = "Talk Submissions") -> str:
        """Generate a combined markdown document from all talks."""
        # Sort talks by PID
        talks.sort(key=lambda t: t.pid)
        
        # Create title page
        markdown_parts = [
            f"---",
            f"title: {title}",
            f"author: Generated by hotcrp2pdf",
            f"date: \\today",
            f"geometry: margin=1in",
            f"fontsize: 11pt",
            f"---",
            f"",
            f"# {title}",
            f"",
            f"Total submissions: {len(talks)}",
            f"",
            f"\\newpage",
            f""
        ]
        
        # Add table of contents
        markdown_parts.extend([
            "# Table of Contents",
            ""
        ])
        
        for talk in talks:
            title_clean = talk.title.replace('#', '').strip()
            markdown_parts.append(f"* [{talk.pid}. {title_clean}](#submission-{talk.pid})")
        
        markdown_parts.extend([
            "",
            "\\newpage",
            ""
        ])
        
        # Add each talk
        for i, talk in enumerate(talks):
            # Add page break before each talk (except the first)
            if i > 0:
                markdown_parts.append("\\newpage\n")
            
            # Add anchor for TOC
            markdown_parts.append(f"{{#submission-{talk.pid}}}")
            markdown_parts.append(talk.render_markdown(include_authors=include_authors))
            markdown_parts.append("")
        
        return "\n".join(markdown_parts)
    
    def markdown_to_pdf(self, markdown_content: str, output_pdf: Path) -> bool:
        """Convert markdown content to PDF using pandoc."""
        # Save markdown to cache
        markdown_file = self.cache_dir / "document.md"
        with open(markdown_file, 'w', encoding='utf-8') as f:
            f.write(markdown_content)
        
        # Pandoc command
        cmd = [
            'pandoc',
            str(markdown_file),
            '-o', str(output_pdf),
            '--pdf-engine=xelatex',
            '--variable', 'linkcolor=blue',
            '--variable', 'urlcolor=blue',
            '--variable', 'citecolor=blue',
            '--variable', 'toccolor=blue',
            '--toc',
            '--toc-depth=2',
            '--number-sections',
            '--highlight-style=tango'
        ]
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, check=True)
            return True
        except subprocess.CalledProcessError as e:
            print(f"Error running pandoc: {e}")
            print(f"Command: {' '.join(cmd)}")
            print(f"Stdout: {e.stdout}")
            print(f"Stderr: {e.stderr}")
            return False
        except FileNotFoundError:
            print("Error: pandoc not found. Please install pandoc.")
            return False
    
    def convert(self, json_file: Path, output_pdf: Path, 
                include_authors: bool = True, title: str = "Talk Submissions") -> bool:
        """Convert HotCRP submissions JSON to PDF.
        
        Args:
            json_file: Path to the HotCRP submissions JSON file
            output_pdf: Path for the output PDF file
            include_authors: Whether to include author information
            title: Title for the document
            
        Returns:
            True if conversion was successful, False otherwise
        """
        try:
            # Load submissions
            print(f"Loading submissions from {json_file}...")
            talks = self.load_submissions(json_file)
            print(f"Loaded {len(talks)} submissions")
            
            if not talks:
                print("No valid submissions found")
                return False
            
            # Generate markdown
            print("Generating markdown...")
            markdown = self.generate_markdown(talks, include_authors=include_authors, title=title)
            
            # Convert to PDF
            print(f"Converting to PDF: {output_pdf}...")
            success = self.markdown_to_pdf(markdown, output_pdf)
            
            if success:
                print(f"Successfully created {output_pdf}")
                print(f"Intermediate files saved in: {self.cache_dir}")
            
            return success
            
        except Exception as e:
            print(f"Error during conversion: {e}")
            return False 